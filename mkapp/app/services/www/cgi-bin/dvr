#!/bin/ash

# Includes
. /tmp/www/cgi-bin/utils

# /cgi-bin/dvr
dvr_on_list() {
    echo "Content-Type: text/html"
    echo ""
    body=""
#    if [ ! -z "$(mount | grep ${SDC_PATH})" ]; then
        for file in $(ls $MOVIE_PATH/*.ts $MOVIE_PATH/*.mp4 2>/dev/null); do
            body="$body $(echo "$(ls -l $file)" | awk '{printf "{\"date\":\"%s %s %s\",\"size\":%s,", $6,$7,$8,$5}')"
            body="$body \"file\":\"${file##*/}\"},"
        done
        if [ ! -z "${body}" ]; then
            body="${body%,}"
        fi
#    fi
    echo "{ \"dvr\":[ $body ] }"
}

# /cgi-bin/dvr?download=filename
dvr_on_download() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        utils_send_binary_file "${MOVIE_PATH}" "$1"
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

# /cgi-bin/dvr?rename=&fr=filename&to=filename
dvr_on_rename() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        mv ${MOVIE_PATH}/${1%.*}.jpg ${MOVIE_PATH}/${2%.*}.jpg
        mv ${MOVIE_PATH}/$1 ${MOVIE_PATH}/$2
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

# /cgi-bin/dvr?delete=filename
dvr_on_delete() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        rm -rf ${MOVIE_PATH}/${1%.*}.*
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

# /cgi-bin/dvr?stop
dvr_on_stop() {
    utils_stop_streaming
    echo "Status: 200 OK"
}

# /cgi-bin/dvr?play=filename
dvr_on_play() {
    utils_stop_streaming

    echo "#EXTM3U" > ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-PLAYLIST-TYPE:VOD" >> ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-VERSION:7" >> ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-TARGETDURATION:2" >> ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-MEDIA-SEQUENCE:0" >> ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-INDEPENDENT-SEGMENTS" >> ${HDZ_DVR_PATH}/stream.m3u8
    echo "#EXT-X-MAP:URI="init.mp4"" >> ${HDZ_DVR_PATH}/stream.m3u8

    hls_time=2
    duration=$(ffprobe -i ${MOVIE_PATH}/$1 -show_entries format=duration -v quiet -of csv="p=0")
    n=$((${duration%.*}/${hls_time}))
    i=0

    while [ $i -le $n ];
    do
        echo "#EXTINF:2.000000,"
        echo "dvr$i.m4s"
        i=$(($i+1))
    done >> ${HDZ_DVR_PATH}/stream.m3u8
    
    echo "#EXT-X-ENDLIST" >>  ${HDZ_DVR_PATH}/stream.m3u8

    nice -n 20 ffmpeg -hide_banner -loglevel fatal -threads 1 -i ${MOVIE_PATH}/$1 -c copy -bsf:a aac_adtstoasc -start_number 0 -f hls -hls_time ${hls_time} -hls_list_size 30 -hls_flags independent_segments -hls_segment_type fmp4 ${HDZ_DVR_PATH}/dvr.m3u8 &

    until [ -f ${HDZ_DVR_PATH}/dvr.m3u8 ]; do
        sleep 0.1
    done

    echo "content-type: text/html":
    echo "content-length: $(wc -c <${HDZ_DVR_M3U8})"
    echo ""

    cat ${HDZ_DVR_M3U8}
}

# /cgi-bin/dvr?image=filename
dvr_on_image() {
    utils_send_image_file "${MOVIE_PATH}" "$1"
}

# Parse Request
if [ -z $QUERY_STRING ]; then
    dvr_on_list
else
    IFS="&"
    set -- $QUERY_STRING
    key="${1%=*}"
    if [ ${key} == "download" ]; then
        dvr_on_download "${1#*=}"
    elif [ ${key} == "rename" ]; then
        dvr_on_rename "${2#*=}" "${3#*=}"
    elif [ ${key} == "delete" ]; then
        dvr_on_delete "${1#*=}"
    elif [ ${key} == "stop" ]; then
        dvr_on_stop
    elif [ ${key} == "play" ]; then
        dvr_on_play "${1#*=}"
    elif [ ${key} == "image" ]; then
        dvr_on_image "${1#*=}"
    fi
fi
