#!/bin/ash

# Includes
. /tmp/www/cgi-bin/constants
. /tmp/www/cgi-bin/utils

# Handlers
on_dvr() {
    echo "Content-Type: text/html"
    echo ""
    body=""
#    if [ ! -z "$(mount | grep ${SDC_PATH})" ]; then
        for file in $(ls $MOVIE_PATH/*.ts $MOVIE_PATH/*.mp4 2>/dev/null); do
            body="$body $(echo "$(ls -l $file)" | awk '{printf "{\"date\":\"%s %s %s\",\"size\":%s,", $6,$7,$8,$5}')"
            body="$body \"file\":\"${file##*/}\"},"
        done
        if [ ! -z "${body}" ]; then
            body="${body%,}"
        fi
#    fi
    echo "{ \"dvr\":[ $body ] }"
}

on_dvr_download() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        utils_send_binary_file "${MOVIE_PATH}" "$1"
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

on_dvr_rename() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        mv ${MOVIE_PATH}/${1%.*}.jpg ${MOVIE_PATH}/${2%.*}.jpg
        mv ${MOVIE_PATH}/$1 ${MOVIE_PATH}/$2
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

on_dvr_delete() {
    utils_is_action_authorized "${HTTP_COOKIE#token=}"
    if test "$?" -eq 0 -a -f ${MOVIE_PATH}/$1; then
        rm -rf ${MOVIE_PATH}/${1%.*}.*
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

on_dvr_stop() {
    killall ffmpeg > /dev/null 2> /dev/null
    sleep 1
    rm -rf ${HDZ_LIVE_PATH}/stream* 2>&1 > /dev/null
    rm -rf ${HDZ_LIVE_PATH}/init* 2>&1 > /dev/null
    rm -rf ${HDZ_DVR_PATH}/stream* 2>&1 > /dev/null
    rm -rf ${HDZ_DVR_PATH}/init* 2>&1 > /dev/null
    echo "Status: 200 OK"
}

on_dvr_play() {
    killall ffmpeg > /dev/null 2> /dev/null
    sleep 1
    rm -rf ${HDZ_LIVE_PATH}/stream* 2>&1 > /dev/null
    rm -rf ${HDZ_LIVE_PATH}/init* 2>&1 > /dev/null
    rm -rf ${HDZ_DVR_PATH}/stream* 2>&1 > /dev/null
    rm -rf ${HDZ_DVR_PATH}/init* 2>&1 > /dev/null

    nice -n 20 ffmpeg -hide_banner -loglevel fatal -threads 1 -i ${MEDIA_PATH}/$1 -c copy -bsf:a aac_adtstoasc -start_number 0 -f hls -hls_time 2 -hls_list_size 30 -hls_flags independent_segments+delete_segments -hls_segment_type fmp4 ${HDZ_DVR_PATH}/stream.m3u8 &

    until [ -f ${HDZ_DVR_PATH}/stream.m3u8 ]; do
        sleep 0.1
    done

    echo "content-type: text/html":
    echo "content-length: $(wc -c <${HDZ_DVR_M3U8})"
    echo ""

    cat ${HDZ_DVR_M3U8}
}

on_dvr_image() {
    utils_send_image_file "${MOVIE_PATH}" "$1"
}

# Parse Request
if [ -z $QUERY_STRING ]; then
    on_dvr
else
    IFS="&"
    set -- $QUERY_STRING
    key="${1%=*}"
    if [ ${key} == "download" ]; then
        on_dvr_download "${1#*=}"
    elif [ ${key} == "rename" ]; then
        on_dvr_rename "${2#*=}" "${3#*=}"
    elif [ ${key} == "delete" ]; then
        on_dvr_delete "${1#*=}"
    elif [ ${key} == "play" ]; then
        on_dvr_play "${1#*=}"
    elif [ ${key} == "stop" ]; then
        on_dvr_stop
    elif [ ${key} == "image" ]; then
        on_dvr_image "${1#*=}"
    fi
fi
